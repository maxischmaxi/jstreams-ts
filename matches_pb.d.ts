// @generated by protoc-gen-es v1.10.0
// @generated from file matches.proto (package matches, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RegionalRoutingValues } from "./account_pb.js";

/**
 * @generated from message matches.GetMatchIdsByPuuidRequest
 */
export declare class GetMatchIdsByPuuidRequest extends Message<GetMatchIdsByPuuidRequest> {
  /**
   * @generated from field: string puuid = 1;
   */
  puuid: string;

  /**
   * @generated from field: account.RegionalRoutingValues region = 2;
   */
  region: RegionalRoutingValues;

  /**
   * @generated from field: optional string startTime = 3;
   */
  startTime?: string;

  /**
   * @generated from field: optional string endTime = 4;
   */
  endTime?: string;

  /**
   * @generated from field: optional int32 queue = 5;
   */
  queue?: number;

  /**
   * @generated from field: optional string type = 6;
   */
  type?: string;

  /**
   * @generated from field: optional int32 start = 7;
   */
  start?: number;

  /**
   * @generated from field: optional int32 count = 8;
   */
  count?: number;

  constructor(data?: PartialMessage<GetMatchIdsByPuuidRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.GetMatchIdsByPuuidRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMatchIdsByPuuidRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMatchIdsByPuuidRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMatchIdsByPuuidRequest;

  static equals(a: GetMatchIdsByPuuidRequest | PlainMessage<GetMatchIdsByPuuidRequest> | undefined, b: GetMatchIdsByPuuidRequest | PlainMessage<GetMatchIdsByPuuidRequest> | undefined): boolean;
}

/**
 * @generated from message matches.GetMatchIdsByPuuidResponse
 */
export declare class GetMatchIdsByPuuidResponse extends Message<GetMatchIdsByPuuidResponse> {
  /**
   * @generated from field: repeated string matchIds = 1;
   */
  matchIds: string[];

  constructor(data?: PartialMessage<GetMatchIdsByPuuidResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.GetMatchIdsByPuuidResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMatchIdsByPuuidResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMatchIdsByPuuidResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMatchIdsByPuuidResponse;

  static equals(a: GetMatchIdsByPuuidResponse | PlainMessage<GetMatchIdsByPuuidResponse> | undefined, b: GetMatchIdsByPuuidResponse | PlainMessage<GetMatchIdsByPuuidResponse> | undefined): boolean;
}

/**
 * @generated from message matches.GetMatchByMatchIdRequest
 */
export declare class GetMatchByMatchIdRequest extends Message<GetMatchByMatchIdRequest> {
  /**
   * @generated from field: string matchId = 1;
   */
  matchId: string;

  /**
   * @generated from field: account.RegionalRoutingValues region = 2;
   */
  region: RegionalRoutingValues;

  constructor(data?: PartialMessage<GetMatchByMatchIdRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.GetMatchByMatchIdRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMatchByMatchIdRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMatchByMatchIdRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMatchByMatchIdRequest;

  static equals(a: GetMatchByMatchIdRequest | PlainMessage<GetMatchByMatchIdRequest> | undefined, b: GetMatchByMatchIdRequest | PlainMessage<GetMatchByMatchIdRequest> | undefined): boolean;
}

/**
 * @generated from message matches.GetMatchByMatchIdResponse
 */
export declare class GetMatchByMatchIdResponse extends Message<GetMatchByMatchIdResponse> {
  /**
   * @generated from field: matches.Match match = 1;
   */
  match?: Match;

  constructor(data?: PartialMessage<GetMatchByMatchIdResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.GetMatchByMatchIdResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMatchByMatchIdResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMatchByMatchIdResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMatchByMatchIdResponse;

  static equals(a: GetMatchByMatchIdResponse | PlainMessage<GetMatchByMatchIdResponse> | undefined, b: GetMatchByMatchIdResponse | PlainMessage<GetMatchByMatchIdResponse> | undefined): boolean;
}

/**
 * @generated from message matches.MatchMetadata
 */
export declare class MatchMetadata extends Message<MatchMetadata> {
  /**
   * @generated from field: string dataVersion = 1;
   */
  dataVersion: string;

  /**
   * @generated from field: string matchId = 2;
   */
  matchId: string;

  /**
   * @generated from field: repeated string participants = 3;
   */
  participants: string[];

  constructor(data?: PartialMessage<MatchMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.MatchMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchMetadata;

  static equals(a: MatchMetadata | PlainMessage<MatchMetadata> | undefined, b: MatchMetadata | PlainMessage<MatchMetadata> | undefined): boolean;
}

/**
 * @generated from message matches.MatchInfo
 */
export declare class MatchInfo extends Message<MatchInfo> {
  /**
   * @generated from field: string endOfGameResult = 1;
   */
  endOfGameResult: string;

  /**
   * @generated from field: int32 gameCreation = 2;
   */
  gameCreation: number;

  /**
   * @generated from field: int32 gameDuration = 3;
   */
  gameDuration: number;

  /**
   * @generated from field: int32 gameEndTimestamp = 4;
   */
  gameEndTimestamp: number;

  /**
   * @generated from field: int32 gameId = 5;
   */
  gameId: number;

  /**
   * @generated from field: string gameMode = 6;
   */
  gameMode: string;

  /**
   * @generated from field: string gameName = 7;
   */
  gameName: string;

  /**
   * @generated from field: int32 gameStartTimestamp = 8;
   */
  gameStartTimestamp: number;

  /**
   * @generated from field: string gameType = 9;
   */
  gameType: string;

  /**
   * @generated from field: string gameVersion = 10;
   */
  gameVersion: string;

  /**
   * @generated from field: int32 mapId = 11;
   */
  mapId: number;

  /**
   * @generated from field: string platformId = 12;
   */
  platformId: string;

  /**
   * @generated from field: int32 queueId = 13;
   */
  queueId: number;

  /**
   * @generated from field: string tournamentCode = 14;
   */
  tournamentCode: string;

  /**
   * @generated from field: repeated matches.MatchParticipant participants = 15;
   */
  participants: MatchParticipant[];

  /**
   * @generated from field: repeated matches.Team teams = 16;
   */
  teams: Team[];

  constructor(data?: PartialMessage<MatchInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.MatchInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchInfo;

  static equals(a: MatchInfo | PlainMessage<MatchInfo> | undefined, b: MatchInfo | PlainMessage<MatchInfo> | undefined): boolean;
}

/**
 * @generated from message matches.Team
 */
export declare class Team extends Message<Team> {
  /**
   * @generated from field: repeated matches.Ban bans = 1;
   */
  bans: Ban[];

  /**
   * @generated from field: repeated matches.Objective objectives = 2;
   */
  objectives: Objective[];

  /**
   * @generated from field: int32 teamId = 3;
   */
  teamId: number;

  /**
   * @generated from field: bool win = 4;
   */
  win: boolean;

  constructor(data?: PartialMessage<Team>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Team";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Team;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Team;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Team;

  static equals(a: Team | PlainMessage<Team> | undefined, b: Team | PlainMessage<Team> | undefined): boolean;
}

/**
 * @generated from message matches.Ban
 */
export declare class Ban extends Message<Ban> {
  /**
   * @generated from field: int32 championId = 1;
   */
  championId: number;

  /**
   * @generated from field: int32 pickTurn = 2;
   */
  pickTurn: number;

  constructor(data?: PartialMessage<Ban>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Ban";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ban;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ban;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ban;

  static equals(a: Ban | PlainMessage<Ban> | undefined, b: Ban | PlainMessage<Ban> | undefined): boolean;
}

/**
 * @generated from message matches.Objective
 */
export declare class Objective extends Message<Objective> {
  /**
   * @generated from field: matches.ObjectiveTarget baron = 1;
   */
  baron?: ObjectiveTarget;

  /**
   * @generated from field: matches.ObjectiveTarget champion = 2;
   */
  champion?: ObjectiveTarget;

  /**
   * @generated from field: matches.ObjectiveTarget dragon = 3;
   */
  dragon?: ObjectiveTarget;

  /**
   * @generated from field: matches.ObjectiveTarget horde = 4;
   */
  horde?: ObjectiveTarget;

  /**
   * @generated from field: matches.ObjectiveTarget inhibitor = 5;
   */
  inhibitor?: ObjectiveTarget;

  /**
   * @generated from field: matches.ObjectiveTarget riftHerald = 6;
   */
  riftHerald?: ObjectiveTarget;

  /**
   * @generated from field: matches.ObjectiveTarget tower = 7;
   */
  tower?: ObjectiveTarget;

  constructor(data?: PartialMessage<Objective>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Objective";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Objective;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Objective;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Objective;

  static equals(a: Objective | PlainMessage<Objective> | undefined, b: Objective | PlainMessage<Objective> | undefined): boolean;
}

/**
 * @generated from message matches.ObjectiveTarget
 */
export declare class ObjectiveTarget extends Message<ObjectiveTarget> {
  /**
   * @generated from field: bool first = 1;
   */
  first: boolean;

  /**
   * @generated from field: int32 kills = 2;
   */
  kills: number;

  constructor(data?: PartialMessage<ObjectiveTarget>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.ObjectiveTarget";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectiveTarget;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectiveTarget;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectiveTarget;

  static equals(a: ObjectiveTarget | PlainMessage<ObjectiveTarget> | undefined, b: ObjectiveTarget | PlainMessage<ObjectiveTarget> | undefined): boolean;
}

/**
 * @generated from message matches.MatchParticipant
 */
export declare class MatchParticipant extends Message<MatchParticipant> {
  /**
   * @generated from field: int32 allInPings = 1;
   */
  allInPings: number;

  /**
   * @generated from field: int32 assistMePings = 2;
   */
  assistMePings: number;

  /**
   * @generated from field: int32 assists = 3;
   */
  assists: number;

  /**
   * @generated from field: int32 baronKills = 4;
   */
  baronKills: number;

  /**
   * @generated from field: int32 basicPings = 5;
   */
  basicPings: number;

  /**
   * @generated from field: int32 bountyLevel = 6;
   */
  bountyLevel: number;

  /**
   * @generated from field: repeated matches.Challange challanges = 7;
   */
  challanges: Challange[];

  /**
   * @generated from field: int32 champExperience = 8;
   */
  champExperience: number;

  /**
   * @generated from field: int32 champLevel = 9;
   */
  champLevel: number;

  /**
   * @generated from field: int32 championId = 10;
   */
  championId: number;

  /**
   * @generated from field: string championName = 11;
   */
  championName: string;

  /**
   * @generated from field: int32 championTransform = 12;
   */
  championTransform: number;

  /**
   * @generated from field: int32 commandPings = 13;
   */
  commandPings: number;

  /**
   * @generated from field: int32 consumablesPurchased = 14;
   */
  consumablesPurchased: number;

  /**
   * @generated from field: int32 damageDealtToBuildings = 15;
   */
  damageDealtToBuildings: number;

  /**
   * @generated from field: int32 damageDealtToObjectives = 16;
   */
  damageDealtToObjectives: number;

  /**
   * @generated from field: int32 damageDealtToTurrets = 17;
   */
  damageDealtToTurrets: number;

  /**
   * @generated from field: int32 damageSelfMitigated = 18;
   */
  damageSelfMitigated: number;

  /**
   * @generated from field: int32 dangerPings = 19;
   */
  dangerPings: number;

  /**
   * @generated from field: int32 deaths = 20;
   */
  deaths: number;

  /**
   * @generated from field: int32 detectorWardsPlaced = 21;
   */
  detectorWardsPlaced: number;

  /**
   * @generated from field: int32 doubleKills = 22;
   */
  doubleKills: number;

  /**
   * @generated from field: int32 dragonKills = 23;
   */
  dragonKills: number;

  /**
   * @generated from field: bool eligibleForProgression = 24;
   */
  eligibleForProgression: boolean;

  /**
   * @generated from field: int32 enemyMissingPings = 25;
   */
  enemyMissingPings: number;

  /**
   * @generated from field: int32 enemyVisionPings = 26;
   */
  enemyVisionPings: number;

  /**
   * @generated from field: bool firstBloodAssist = 27;
   */
  firstBloodAssist: boolean;

  /**
   * @generated from field: bool firstBloodKill = 28;
   */
  firstBloodKill: boolean;

  /**
   * @generated from field: bool firstTowerAssist = 29;
   */
  firstTowerAssist: boolean;

  /**
   * @generated from field: bool firstTowerKill = 30;
   */
  firstTowerKill: boolean;

  /**
   * @generated from field: bool gameEndedInEarlySurrender = 31;
   */
  gameEndedInEarlySurrender: boolean;

  /**
   * @generated from field: bool gameEndedInSurrender = 32;
   */
  gameEndedInSurrender: boolean;

  /**
   * @generated from field: int32 getBackPings = 33;
   */
  getBackPings: number;

  /**
   * @generated from field: int32 goldEarned = 34;
   */
  goldEarned: number;

  /**
   * @generated from field: int32 goldSpent = 35;
   */
  goldSpent: number;

  /**
   * @generated from field: int32 holdPings = 36;
   */
  holdPings: number;

  /**
   * @generated from field: string individualPosition = 37;
   */
  individualPosition: string;

  /**
   * @generated from field: int32 inhibitorKills = 38;
   */
  inhibitorKills: number;

  /**
   * @generated from field: int32 inhibitorTakedowns = 39;
   */
  inhibitorTakedowns: number;

  /**
   * @generated from field: int32 inhibitorsLost = 40;
   */
  inhibitorsLost: number;

  /**
   * @generated from field: int32 item0 = 41;
   */
  item0: number;

  /**
   * @generated from field: int32 item1 = 42;
   */
  item1: number;

  /**
   * @generated from field: int32 item2 = 43;
   */
  item2: number;

  /**
   * @generated from field: int32 item3 = 44;
   */
  item3: number;

  /**
   * @generated from field: int32 item4 = 45;
   */
  item4: number;

  /**
   * @generated from field: int32 item5 = 46;
   */
  item5: number;

  /**
   * @generated from field: int32 item6 = 47;
   */
  item6: number;

  /**
   * @generated from field: int32 itemsPurchased = 48;
   */
  itemsPurchased: number;

  /**
   * @generated from field: int32 killingSprees = 49;
   */
  killingSprees: number;

  /**
   * @generated from field: int32 kills = 50;
   */
  kills: number;

  /**
   * @generated from field: string lane = 51;
   */
  lane: string;

  /**
   * @generated from field: int32 largestCriticalStrike = 52;
   */
  largestCriticalStrike: number;

  /**
   * @generated from field: int32 largestKillingSpree = 53;
   */
  largestKillingSpree: number;

  /**
   * @generated from field: int32 largestMultiKill = 54;
   */
  largestMultiKill: number;

  /**
   * @generated from field: int32 longestTimeSpentLiving = 55;
   */
  longestTimeSpentLiving: number;

  /**
   * @generated from field: int32 magicDamageDealt = 56;
   */
  magicDamageDealt: number;

  /**
   * @generated from field: int32 magicDamageDealtToChampions = 57;
   */
  magicDamageDealtToChampions: number;

  /**
   * @generated from field: int32 magicDamageTaken = 58;
   */
  magicDamageTaken: number;

  /**
   * @generated from field: repeated matches.Mission missions = 59;
   */
  missions: Mission[];

  /**
   * @generated from field: int32 needVisionPings = 60;
   */
  needVisionPings: number;

  /**
   * @generated from field: int32 neutralMinionsKilled = 61;
   */
  neutralMinionsKilled: number;

  /**
   * @generated from field: int32 nexusKills = 62;
   */
  nexusKills: number;

  /**
   * @generated from field: int32 nexusLost = 63;
   */
  nexusLost: number;

  /**
   * @generated from field: int32 nexusTakedowns = 64;
   */
  nexusTakedowns: number;

  /**
   * @generated from field: int32 objectivesStolen = 65;
   */
  objectivesStolen: number;

  /**
   * @generated from field: int32 objectivesStolenAssists = 66;
   */
  objectivesStolenAssists: number;

  /**
   * @generated from field: int32 onMyWayPings = 67;
   */
  onMyWayPings: number;

  /**
   * @generated from field: int32 participantId = 68;
   */
  participantId: number;

  /**
   * @generated from field: int32 pentaKills = 69;
   */
  pentaKills: number;

  /**
   * @generated from field: repeated matches.Perk perks = 70;
   */
  perks: Perk[];

  /**
   * @generated from field: int32 physicalDamageDealt = 71;
   */
  physicalDamageDealt: number;

  /**
   * @generated from field: int32 physicalDamageDealtToChampions = 72;
   */
  physicalDamageDealtToChampions: number;

  /**
   * @generated from field: int32 physicalDamageTaken = 73;
   */
  physicalDamageTaken: number;

  /**
   * @generated from field: int32 placement = 74;
   */
  placement: number;

  /**
   * @generated from field: int32 playerAugment1 = 75;
   */
  playerAugment1: number;

  /**
   * @generated from field: int32 playerAugment2 = 76;
   */
  playerAugment2: number;

  /**
   * @generated from field: int32 playerAugment3 = 77;
   */
  playerAugment3: number;

  /**
   * @generated from field: int32 playerAugment4 = 78;
   */
  playerAugment4: number;

  /**
   * @generated from field: int32 playerAugment5 = 79;
   */
  playerAugment5: number;

  /**
   * @generated from field: int32 playerAugment6 = 80;
   */
  playerAugment6: number;

  /**
   * @generated from field: int32 playerSubteamId = 81;
   */
  playerSubteamId: number;

  /**
   * @generated from field: int32 profileIcon = 82;
   */
  profileIcon: number;

  /**
   * @generated from field: int32 pushPings = 83;
   */
  pushPings: number;

  /**
   * @generated from field: string puuid = 84;
   */
  puuid: string;

  /**
   * @generated from field: int32 quadraKills = 85;
   */
  quadraKills: number;

  /**
   * @generated from field: string riotIdGameName = 86;
   */
  riotIdGameName: string;

  /**
   * @generated from field: string riotIdTagline = 87;
   */
  riotIdTagline: string;

  /**
   * @generated from field: string role = 88;
   */
  role: string;

  /**
   * @generated from field: int32 sightWardsBoughtInGame = 89;
   */
  sightWardsBoughtInGame: number;

  /**
   * @generated from field: int32 spell1Casts = 90;
   */
  spell1Casts: number;

  /**
   * @generated from field: int32 spell2Casts = 91;
   */
  spell2Casts: number;

  /**
   * @generated from field: int32 spell3Casts = 92;
   */
  spell3Casts: number;

  /**
   * @generated from field: int32 spell4Casts = 93;
   */
  spell4Casts: number;

  /**
   * @generated from field: int32 subteamPlacement = 94;
   */
  subteamPlacement: number;

  /**
   * @generated from field: int32 summoner1Casts = 95;
   */
  summoner1Casts: number;

  /**
   * @generated from field: int32 summoner1Id = 96;
   */
  summoner1Id: number;

  /**
   * @generated from field: int32 summoner2Casts = 97;
   */
  summoner2Casts: number;

  /**
   * @generated from field: int32 summoner2Id = 98;
   */
  summoner2Id: number;

  /**
   * @generated from field: string summonerId = 99;
   */
  summonerId: string;

  /**
   * @generated from field: int32 summonerLevel = 100;
   */
  summonerLevel: number;

  /**
   * @generated from field: string summonerName = 101;
   */
  summonerName: string;

  /**
   * @generated from field: bool teamEarlySurrendered = 102;
   */
  teamEarlySurrendered: boolean;

  /**
   * @generated from field: int32 teamId = 103;
   */
  teamId: number;

  /**
   * @generated from field: string teamPosition = 104;
   */
  teamPosition: string;

  /**
   * @generated from field: int32 timeCCingOthers = 105;
   */
  timeCCingOthers: number;

  /**
   * @generated from field: int32 timePlayed = 106;
   */
  timePlayed: number;

  /**
   * @generated from field: int32 totalAllyJungleMinionsKilled = 107;
   */
  totalAllyJungleMinionsKilled: number;

  /**
   * @generated from field: int32 totalDamageDealt = 108;
   */
  totalDamageDealt: number;

  /**
   * @generated from field: int32 totalDamageDealtToChampions = 109;
   */
  totalDamageDealtToChampions: number;

  /**
   * @generated from field: int32 totalDamageShieldedOnTeammates = 110;
   */
  totalDamageShieldedOnTeammates: number;

  /**
   * @generated from field: int32 totalDamageTaken = 111;
   */
  totalDamageTaken: number;

  /**
   * @generated from field: int32 totalEnemyJungleMinionsKilled = 112;
   */
  totalEnemyJungleMinionsKilled: number;

  /**
   * @generated from field: int32 totalHeal = 113;
   */
  totalHeal: number;

  /**
   * @generated from field: int32 totalHealsOnTeammates = 114;
   */
  totalHealsOnTeammates: number;

  /**
   * @generated from field: int32 totalMinionsKilled = 115;
   */
  totalMinionsKilled: number;

  /**
   * @generated from field: int32 totalTimeCCDealt = 116;
   */
  totalTimeCCDealt: number;

  /**
   * @generated from field: int32 totalTimeSpentDead = 117;
   */
  totalTimeSpentDead: number;

  /**
   * @generated from field: int32 totalUnitsHealed = 118;
   */
  totalUnitsHealed: number;

  /**
   * @generated from field: int32 tripleKills = 119;
   */
  tripleKills: number;

  /**
   * @generated from field: int32 trueDamageDealt = 120;
   */
  trueDamageDealt: number;

  /**
   * @generated from field: int32 trueDamageDealtToChampions = 121;
   */
  trueDamageDealtToChampions: number;

  /**
   * @generated from field: int32 trueDamageTaken = 122;
   */
  trueDamageTaken: number;

  /**
   * @generated from field: int32 turretKills = 123;
   */
  turretKills: number;

  /**
   * @generated from field: int32 turretTakedowns = 124;
   */
  turretTakedowns: number;

  /**
   * @generated from field: int32 turretsLost = 125;
   */
  turretsLost: number;

  /**
   * @generated from field: int32 unrealKills = 126;
   */
  unrealKills: number;

  /**
   * @generated from field: int32 visionClearedPings = 127;
   */
  visionClearedPings: number;

  /**
   * @generated from field: int32 visionScore = 128;
   */
  visionScore: number;

  /**
   * @generated from field: int32 visionWardsBoughtInGame = 129;
   */
  visionWardsBoughtInGame: number;

  /**
   * @generated from field: int32 wardsKilled = 130;
   */
  wardsKilled: number;

  /**
   * @generated from field: int32 wardsPlaced = 131;
   */
  wardsPlaced: number;

  /**
   * @generated from field: bool win = 132;
   */
  win: boolean;

  constructor(data?: PartialMessage<MatchParticipant>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.MatchParticipant";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchParticipant;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchParticipant;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchParticipant;

  static equals(a: MatchParticipant | PlainMessage<MatchParticipant> | undefined, b: MatchParticipant | PlainMessage<MatchParticipant> | undefined): boolean;
}

/**
 * @generated from message matches.Perk
 */
export declare class Perk extends Message<Perk> {
  /**
   * @generated from field: matches.StatPerks statPerks = 1;
   */
  statPerks?: StatPerks;

  /**
   * @generated from field: matches.StylePerks stylePerks = 2;
   */
  stylePerks?: StylePerks;

  constructor(data?: PartialMessage<Perk>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Perk";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Perk;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Perk;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Perk;

  static equals(a: Perk | PlainMessage<Perk> | undefined, b: Perk | PlainMessage<Perk> | undefined): boolean;
}

/**
 * @generated from message matches.StatPerks
 */
export declare class StatPerks extends Message<StatPerks> {
  /**
   * @generated from field: int32 defense = 1;
   */
  defense: number;

  /**
   * @generated from field: int32 flex = 2;
   */
  flex: number;

  /**
   * @generated from field: int32 offense = 3;
   */
  offense: number;

  constructor(data?: PartialMessage<StatPerks>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.StatPerks";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatPerks;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatPerks;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatPerks;

  static equals(a: StatPerks | PlainMessage<StatPerks> | undefined, b: StatPerks | PlainMessage<StatPerks> | undefined): boolean;
}

/**
 * @generated from message matches.StylePerks
 */
export declare class StylePerks extends Message<StylePerks> {
  /**
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * @generated from field: repeated matches.StylePerkSelection selections = 2;
   */
  selections: StylePerkSelection[];

  /**
   * @generated from field: int32 style = 3;
   */
  style: number;

  constructor(data?: PartialMessage<StylePerks>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.StylePerks";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StylePerks;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StylePerks;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StylePerks;

  static equals(a: StylePerks | PlainMessage<StylePerks> | undefined, b: StylePerks | PlainMessage<StylePerks> | undefined): boolean;
}

/**
 * @generated from message matches.StylePerkSelection
 */
export declare class StylePerkSelection extends Message<StylePerkSelection> {
  /**
   * @generated from field: int32 perk = 1;
   */
  perk: number;

  /**
   * @generated from field: int32 var1 = 2;
   */
  var1: number;

  /**
   * @generated from field: int32 var2 = 3;
   */
  var2: number;

  /**
   * @generated from field: int32 var3 = 4;
   */
  var3: number;

  constructor(data?: PartialMessage<StylePerkSelection>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.StylePerkSelection";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StylePerkSelection;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StylePerkSelection;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StylePerkSelection;

  static equals(a: StylePerkSelection | PlainMessage<StylePerkSelection> | undefined, b: StylePerkSelection | PlainMessage<StylePerkSelection> | undefined): boolean;
}

/**
 * @generated from message matches.Mission
 */
export declare class Mission extends Message<Mission> {
  /**
   * @generated from field: int32 playerScore0 = 1;
   */
  playerScore0: number;

  /**
   * @generated from field: int32 playerScore1 = 2;
   */
  playerScore1: number;

  /**
   * @generated from field: int32 playerScore2 = 3;
   */
  playerScore2: number;

  /**
   * @generated from field: int32 playerScore3 = 4;
   */
  playerScore3: number;

  /**
   * @generated from field: int32 playerScore4 = 5;
   */
  playerScore4: number;

  /**
   * @generated from field: int32 playerScore5 = 6;
   */
  playerScore5: number;

  /**
   * @generated from field: int32 playerScore6 = 7;
   */
  playerScore6: number;

  /**
   * @generated from field: int32 playerScore7 = 8;
   */
  playerScore7: number;

  /**
   * @generated from field: int32 playerScore8 = 9;
   */
  playerScore8: number;

  /**
   * @generated from field: int32 playerScore9 = 10;
   */
  playerScore9: number;

  /**
   * @generated from field: int32 playerScore10 = 11;
   */
  playerScore10: number;

  /**
   * @generated from field: int32 playerScore11 = 12;
   */
  playerScore11: number;

  constructor(data?: PartialMessage<Mission>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Mission";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mission;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mission;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mission;

  static equals(a: Mission | PlainMessage<Mission> | undefined, b: Mission | PlainMessage<Mission> | undefined): boolean;
}

/**
 * @generated from message matches.Challange
 */
export declare class Challange extends Message<Challange> {
  /**
   * int32 12AssistStreakCount = 1;
   *
   * @generated from field: int32 HealFromMapSources = 2;
   */
  HealFromMapSources: number;

  /**
   * @generated from field: int32 InfernalScalePickups = 3;
   */
  InfernalScalePickups: number;

  /**
   * @generated from field: int32 SWARM_DefeatAatrox = 4;
   */
  SWARMDefeatAatrox: number;

  /**
   * @generated from field: int32 SWARM_DefeatBriar = 5;
   */
  SWARMDefeatBriar: number;

  /**
   * @generated from field: int32 SWARM_DefeatMiniBosses = 6;
   */
  SWARMDefeatMiniBosses: number;

  /**
   * @generated from field: int32 SWARM_EvolveWeapon = 7;
   */
  SWARMEvolveWeapon: number;

  /**
   * @generated from field: int32 SWARM_Have3Passives = 8;
   */
  SWARMHave3Passives: number;

  /**
   * @generated from field: int32 SWARM_KillEnemy = 9;
   */
  SWARMKillEnemy: number;

  /**
   * @generated from field: int32 SWARM_PickupGold = 10;
   */
  SWARMPickupGold: number;

  /**
   * @generated from field: int32 SWARM_ReachLevel50 = 11;
   */
  SWARMReachLevel50: number;

  /**
   * @generated from field: int32 SWARM_Survive15Min = 12;
   */
  SWARMSurvive15Min: number;

  /**
   * @generated from field: int32 SWARM_WinWith5EvolvedWeapons = 13;
   */
  SWARMWinWith5EvolvedWeapons: number;

  /**
   * @generated from field: int32 abilityUses = 14;
   */
  abilityUses: number;

  /**
   * @generated from field: int32 acesBefore15Minutes = 15;
   */
  acesBefore15Minutes: number;

  /**
   * @generated from field: int32 alliedJungleMonsterKills = 16;
   */
  alliedJungleMonsterKills: number;

  /**
   * @generated from field: int32 baronTakedowns = 17;
   */
  baronTakedowns: number;

  /**
   * @generated from field: int32 blastConeOppositeOpponentCount = 18;
   */
  blastConeOppositeOpponentCount: number;

  /**
   * @generated from field: int32 bountyGold = 19;
   */
  bountyGold: number;

  /**
   * @generated from field: int32 buffsStolen = 20;
   */
  buffsStolen: number;

  /**
   * @generated from field: int32 completeSupportQuestInTime = 21;
   */
  completeSupportQuestInTime: number;

  /**
   * @generated from field: int32 controlWardsPlaced = 22;
   */
  controlWardsPlaced: number;

  /**
   * @generated from field: int32 damagePerMinute = 23;
   */
  damagePerMinute: number;

  /**
   * @generated from field: int32 damageTakenOnTeamPercentage = 24;
   */
  damageTakenOnTeamPercentage: number;

  /**
   * @generated from field: int32 dancedWithRiftHerald = 25;
   */
  dancedWithRiftHerald: number;

  /**
   * @generated from field: int32 deathsByEnemyChamps = 26;
   */
  deathsByEnemyChamps: number;

  /**
   * @generated from field: int32 dodgeSkillShotsSmallWindow = 27;
   */
  dodgeSkillShotsSmallWindow: number;

  /**
   * @generated from field: int32 doubleAces = 28;
   */
  doubleAces: number;

  /**
   * @generated from field: int32 dragonTakedowns = 29;
   */
  dragonTakedowns: number;

  /**
   * @generated from field: int32 effectiveHealAndShielding = 30;
   */
  effectiveHealAndShielding: number;

  /**
   * @generated from field: int32 elderDragonKillsWithOpposingSoul = 31;
   */
  elderDragonKillsWithOpposingSoul: number;

  /**
   * @generated from field: int32 elderDragonMultikills = 32;
   */
  elderDragonMultikills: number;

  /**
   * @generated from field: int32 enemyChampionImmobilizations = 33;
   */
  enemyChampionImmobilizations: number;

  /**
   * @generated from field: int32 enemyJungleMonsterKills = 34;
   */
  enemyJungleMonsterKills: number;

  /**
   * @generated from field: int32 epicMonsterKillsNearEnemyJungler = 35;
   */
  epicMonsterKillsNearEnemyJungler: number;

  /**
   * @generated from field: int32 epicMonsterKillsWithin30SecondsOfSpawn = 36;
   */
  epicMonsterKillsWithin30SecondsOfSpawn: number;

  /**
   * @generated from field: int32 epicMonsterSteals = 37;
   */
  epicMonsterSteals: number;

  /**
   * @generated from field: int32 epicMonsterStolenWithoutSmite = 38;
   */
  epicMonsterStolenWithoutSmite: number;

  /**
   * @generated from field: int32 firstTurretKilled = 39;
   */
  firstTurretKilled: number;

  /**
   * @generated from field: int32 fistBumpParticipation = 40;
   */
  fistBumpParticipation: number;

  /**
   * @generated from field: int32 flawlessAces = 41;
   */
  flawlessAces: number;

  /**
   * @generated from field: int32 fullTeamTakedown = 42;
   */
  fullTeamTakedown: number;

  /**
   * @generated from field: int32 gameLength = 43;
   */
  gameLength: number;

  /**
   * @generated from field: int32 getTakedownsInAllLanesEarlyJungleAsLaner = 44;
   */
  getTakedownsInAllLanesEarlyJungleAsLaner: number;

  /**
   * @generated from field: int32 goldPerMinute = 45;
   */
  goldPerMinute: number;

  /**
   * @generated from field: int32 hadOpenNexus = 46;
   */
  hadOpenNexus: number;

  /**
   * @generated from field: int32 immobilizeAndKillWithAlly = 47;
   */
  immobilizeAndKillWithAlly: number;

  /**
   * @generated from field: int32 initialBuffCount = 48;
   */
  initialBuffCount: number;

  /**
   * @generated from field: int32 initialCrabCount = 49;
   */
  initialCrabCount: number;

  /**
   * @generated from field: int32 jungleCsBefore10Minutes = 50;
   */
  jungleCsBefore10Minutes: number;

  /**
   * @generated from field: int32 junglerTakedownsNearDamagedEpicMonster = 51;
   */
  junglerTakedownsNearDamagedEpicMonster: number;

  /**
   * @generated from field: int32 kTurretsDestroyedBeforePlatesFall = 52;
   */
  kTurretsDestroyedBeforePlatesFall: number;

  /**
   * @generated from field: int32 kda = 53;
   */
  kda: number;

  /**
   * @generated from field: int32 killAfterHiddenWithAlly = 54;
   */
  killAfterHiddenWithAlly: number;

  /**
   * @generated from field: int32 killParticipation = 55;
   */
  killParticipation: number;

  /**
   * @generated from field: int32 killedChampTookFullTeamDamageSurvived = 56;
   */
  killedChampTookFullTeamDamageSurvived: number;

  /**
   * @generated from field: int32 killingSprees = 57;
   */
  killingSprees: number;

  /**
   * @generated from field: int32 killsNearEnemyTurret = 58;
   */
  killsNearEnemyTurret: number;

  /**
   * @generated from field: int32 killsOnOtherLanesEarlyJungleAsLaner = 59;
   */
  killsOnOtherLanesEarlyJungleAsLaner: number;

  /**
   * @generated from field: int32 killsOnRecentlyHealedByAramPack = 60;
   */
  killsOnRecentlyHealedByAramPack: number;

  /**
   * @generated from field: int32 killsUnderOwnTurret = 61;
   */
  killsUnderOwnTurret: number;

  /**
   * @generated from field: int32 killsWithHelpFromEpicMonster = 62;
   */
  killsWithHelpFromEpicMonster: number;

  /**
   * @generated from field: int32 knockEnemyIntoTeamAndKill = 63;
   */
  knockEnemyIntoTeamAndKill: number;

  /**
   * @generated from field: int32 landSkillShotsEarlyGame = 64;
   */
  landSkillShotsEarlyGame: number;

  /**
   * @generated from field: int32 laneMinionsFirst10Minutes = 65;
   */
  laneMinionsFirst10Minutes: number;

  /**
   * @generated from field: int32 legendaryCount = 66;
   */
  legendaryCount: number;

  /**
   * @generated from field: int32 legendaryItemUsed = 67;
   */
  legendaryItemUsed: number;

  /**
   * @generated from field: int32 lostAnInhibitor = 68;
   */
  lostAnInhibitor: number;

  /**
   * @generated from field: int32 maxKillDeficit = 69;
   */
  maxKillDeficit: number;

  /**
   * @generated from field: int32 mejaisFullStackInTime = 70;
   */
  mejaisFullStackInTime: number;

  /**
   * @generated from field: int32 moreEnemyJungleThanOpponent = 71;
   */
  moreEnemyJungleThanOpponent: number;

  /**
   * @generated from field: int32 multiKillOneSpell = 72;
   */
  multiKillOneSpell: number;

  /**
   * @generated from field: int32 multiTurretRiftHeraldCount = 73;
   */
  multiTurretRiftHeraldCount: number;

  /**
   * @generated from field: int32 multikills = 74;
   */
  multikills: number;

  /**
   * @generated from field: int32 multikillsAfterAggressiveFlash = 75;
   */
  multikillsAfterAggressiveFlash: number;

  /**
   * @generated from field: int32 outerTurretExecutesBefore10Minutes = 76;
   */
  outerTurretExecutesBefore10Minutes: number;

  /**
   * @generated from field: int32 outnumberedKills = 77;
   */
  outnumberedKills: number;

  /**
   * @generated from field: int32 outnumberedNexusKill = 78;
   */
  outnumberedNexusKill: number;

  /**
   * @generated from field: int32 perfectDragonSoulsTaken = 79;
   */
  perfectDragonSoulsTaken: number;

  /**
   * @generated from field: int32 perfectGame = 80;
   */
  perfectGame: number;

  /**
   * @generated from field: int32 pickKillWithAlly = 81;
   */
  pickKillWithAlly: number;

  /**
   * @generated from field: int32 poroExplosions = 82;
   */
  poroExplosions: number;

  /**
   * @generated from field: int32 quickCleanse = 83;
   */
  quickCleanse: number;

  /**
   * @generated from field: int32 quickFirstTurret = 84;
   */
  quickFirstTurret: number;

  /**
   * @generated from field: int32 quickSoloKills = 85;
   */
  quickSoloKills: number;

  /**
   * @generated from field: int32 riftHeraldTakedowns = 86;
   */
  riftHeraldTakedowns: number;

  /**
   * @generated from field: int32 saveAllyFromDeath = 87;
   */
  saveAllyFromDeath: number;

  /**
   * @generated from field: int32 scuttleCrabKills = 88;
   */
  scuttleCrabKills: number;

  /**
   * @generated from field: int32 shortestTimeToAceFromFirstTakedown = 89;
   */
  shortestTimeToAceFromFirstTakedown: number;

  /**
   * @generated from field: int32 skillshotsDodged = 90;
   */
  skillshotsDodged: number;

  /**
   * @generated from field: int32 skillshotsHit = 91;
   */
  skillshotsHit: number;

  /**
   * @generated from field: int32 snowballsHit = 92;
   */
  snowballsHit: number;

  /**
   * @generated from field: int32 soloBaronKills = 93;
   */
  soloBaronKills: number;

  /**
   * @generated from field: int32 soloKills = 94;
   */
  soloKills: number;

  /**
   * @generated from field: int32 stealthWardsPlaced = 95;
   */
  stealthWardsPlaced: number;

  /**
   * @generated from field: int32 survivedSingleDigitHpCount = 96;
   */
  survivedSingleDigitHpCount: number;

  /**
   * @generated from field: int32 survivedThreeImmobilizesInFight = 97;
   */
  survivedThreeImmobilizesInFight: number;

  /**
   * @generated from field: int32 takedownOnFirstTurret = 98;
   */
  takedownOnFirstTurret: number;

  /**
   * @generated from field: int32 takedowns = 99;
   */
  takedowns: number;

  /**
   * @generated from field: int32 takedownsAfterGainingLevelAdvantage = 100;
   */
  takedownsAfterGainingLevelAdvantage: number;

  /**
   * @generated from field: int32 takedownsBeforeJungleMinionSpawn = 101;
   */
  takedownsBeforeJungleMinionSpawn: number;

  /**
   * @generated from field: int32 takedownsFirstXMinutes = 102;
   */
  takedownsFirstXMinutes: number;

  /**
   * @generated from field: int32 takedownsInAlcove = 103;
   */
  takedownsInAlcove: number;

  /**
   * @generated from field: int32 takedownsInEnemyFountain = 104;
   */
  takedownsInEnemyFountain: number;

  /**
   * @generated from field: int32 teamBaronKills = 105;
   */
  teamBaronKills: number;

  /**
   * @generated from field: int32 teamDamagePercentage = 106;
   */
  teamDamagePercentage: number;

  /**
   * @generated from field: int32 teamElderDragonKills = 107;
   */
  teamElderDragonKills: number;

  /**
   * @generated from field: int32 teamRiftHeraldKills = 108;
   */
  teamRiftHeraldKills: number;

  /**
   * @generated from field: int32 tookLargeDamageSurvived = 109;
   */
  tookLargeDamageSurvived: number;

  /**
   * @generated from field: int32 turretPlatesTaken = 110;
   */
  turretPlatesTaken: number;

  /**
   * @generated from field: int32 turretTakedowns = 111;
   */
  turretTakedowns: number;

  /**
   * @generated from field: int32 turretsTakenWithRiftHerald = 112;
   */
  turretsTakenWithRiftHerald: number;

  /**
   * @generated from field: int32 twentyMinionsIn3SecondsCount = 113;
   */
  twentyMinionsIn3SecondsCount: number;

  /**
   * @generated from field: int32 twoWardsOneSweeperCount = 114;
   */
  twoWardsOneSweeperCount: number;

  /**
   * @generated from field: int32 unseenRecalls = 115;
   */
  unseenRecalls: number;

  /**
   * @generated from field: int32 visionScorePerMinute = 116;
   */
  visionScorePerMinute: number;

  /**
   * @generated from field: int32 voidMonsterKill = 117;
   */
  voidMonsterKill: number;

  /**
   * @generated from field: int32 wardTakedowns = 118;
   */
  wardTakedowns: number;

  /**
   * @generated from field: int32 wardTakedownsBefore20M = 119;
   */
  wardTakedownsBefore20M: number;

  /**
   * @generated from field: int32 wardsGuarded = 120;
   */
  wardsGuarded: number;

  constructor(data?: PartialMessage<Challange>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Challange";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Challange;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Challange;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Challange;

  static equals(a: Challange | PlainMessage<Challange> | undefined, b: Challange | PlainMessage<Challange> | undefined): boolean;
}

/**
 * @generated from message matches.Match
 */
export declare class Match extends Message<Match> {
  /**
   * @generated from field: matches.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: matches.MatchInfo info = 2;
   */
  info?: MatchInfo;

  constructor(data?: PartialMessage<Match>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Match";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Match;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Match;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Match;

  static equals(a: Match | PlainMessage<Match> | undefined, b: Match | PlainMessage<Match> | undefined): boolean;
}

/**
 * @generated from message matches.GetMatchTimelineRequest
 */
export declare class GetMatchTimelineRequest extends Message<GetMatchTimelineRequest> {
  /**
   * @generated from field: string matchId = 1;
   */
  matchId: string;

  /**
   * @generated from field: account.RegionalRoutingValues region = 2;
   */
  region: RegionalRoutingValues;

  constructor(data?: PartialMessage<GetMatchTimelineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.GetMatchTimelineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMatchTimelineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMatchTimelineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMatchTimelineRequest;

  static equals(a: GetMatchTimelineRequest | PlainMessage<GetMatchTimelineRequest> | undefined, b: GetMatchTimelineRequest | PlainMessage<GetMatchTimelineRequest> | undefined): boolean;
}

/**
 * @generated from message matches.GetMatchTimelineResponse
 */
export declare class GetMatchTimelineResponse extends Message<GetMatchTimelineResponse> {
  /**
   * @generated from field: matches.Timeline timeline = 1;
   */
  timeline?: Timeline;

  constructor(data?: PartialMessage<GetMatchTimelineResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.GetMatchTimelineResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMatchTimelineResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMatchTimelineResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMatchTimelineResponse;

  static equals(a: GetMatchTimelineResponse | PlainMessage<GetMatchTimelineResponse> | undefined, b: GetMatchTimelineResponse | PlainMessage<GetMatchTimelineResponse> | undefined): boolean;
}

/**
 * @generated from message matches.Timeline
 */
export declare class Timeline extends Message<Timeline> {
  /**
   * @generated from field: matches.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: matches.Info info = 2;
   */
  info?: Info;

  constructor(data?: PartialMessage<Timeline>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Timeline";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Timeline;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Timeline;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Timeline;

  static equals(a: Timeline | PlainMessage<Timeline> | undefined, b: Timeline | PlainMessage<Timeline> | undefined): boolean;
}

/**
 * @generated from message matches.Metadata
 */
export declare class Metadata extends Message<Metadata> {
  /**
   * @generated from field: string dataVersion = 1;
   */
  dataVersion: string;

  /**
   * @generated from field: string matchId = 2;
   */
  matchId: string;

  /**
   * @generated from field: repeated string participants = 3;
   */
  participants: string[];

  constructor(data?: PartialMessage<Metadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Metadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata;

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean;
}

/**
 * @generated from message matches.Info
 */
export declare class Info extends Message<Info> {
  /**
   * @generated from field: string endOfGameResult = 1;
   */
  endOfGameResult: string;

  /**
   * @generated from field: int64 frameInterval = 2;
   */
  frameInterval: bigint;

  /**
   * @generated from field: repeated matches.Frame frames = 3;
   */
  frames: Frame[];

  /**
   * @generated from field: string gameId = 4;
   */
  gameId: string;

  /**
   * @generated from field: repeated matches.Participant participants = 5;
   */
  participants: Participant[];

  constructor(data?: PartialMessage<Info>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Info";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info;

  static equals(a: Info | PlainMessage<Info> | undefined, b: Info | PlainMessage<Info> | undefined): boolean;
}

/**
 * @generated from message matches.Participant
 */
export declare class Participant extends Message<Participant> {
  /**
   * @generated from field: int32 participantId = 1;
   */
  participantId: number;

  /**
   * @generated from field: string puuid = 2;
   */
  puuid: string;

  constructor(data?: PartialMessage<Participant>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Participant";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Participant;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Participant;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Participant;

  static equals(a: Participant | PlainMessage<Participant> | undefined, b: Participant | PlainMessage<Participant> | undefined): boolean;
}

/**
 * @generated from message matches.Frame
 */
export declare class Frame extends Message<Frame> {
  /**
   * @generated from field: repeated matches.Event events = 1;
   */
  events: Event[];

  /**
   * @generated from field: int64 timestamp = 2;
   */
  timestamp: bigint;

  /**
   * @generated from field: map<string, matches.ParticipantFrame> participantFrames = 3;
   */
  participantFrames: { [key: string]: ParticipantFrame };

  constructor(data?: PartialMessage<Frame>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Frame";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Frame;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Frame;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Frame;

  static equals(a: Frame | PlainMessage<Frame> | undefined, b: Frame | PlainMessage<Frame> | undefined): boolean;
}

/**
 * @generated from message matches.ParticipantChampionStats
 */
export declare class ParticipantChampionStats extends Message<ParticipantChampionStats> {
  /**
   * @generated from field: int32 abilityHaste = 1;
   */
  abilityHaste: number;

  /**
   * @generated from field: int32 abilityPower = 2;
   */
  abilityPower: number;

  /**
   * @generated from field: int32 armor = 3;
   */
  armor: number;

  /**
   * @generated from field: int32 armorPen = 4;
   */
  armorPen: number;

  /**
   * @generated from field: int32 armorPenPercent = 5;
   */
  armorPenPercent: number;

  /**
   * @generated from field: int32 attackDamage = 6;
   */
  attackDamage: number;

  /**
   * @generated from field: int32 attackSpeed = 7;
   */
  attackSpeed: number;

  /**
   * @generated from field: int32 bonusArmorPenPercent = 8;
   */
  bonusArmorPenPercent: number;

  /**
   * @generated from field: int32 bonusMagicPenPercent = 9;
   */
  bonusMagicPenPercent: number;

  /**
   * @generated from field: int32 ccReduction = 10;
   */
  ccReduction: number;

  /**
   * @generated from field: int32 cooldownReduction = 11;
   */
  cooldownReduction: number;

  /**
   * @generated from field: int32 health = 12;
   */
  health: number;

  /**
   * @generated from field: int32 healthMax = 13;
   */
  healthMax: number;

  /**
   * @generated from field: int32 healthRegen = 14;
   */
  healthRegen: number;

  /**
   * @generated from field: int32 lifesteal = 15;
   */
  lifesteal: number;

  /**
   * @generated from field: int32 magicPen = 16;
   */
  magicPen: number;

  /**
   * @generated from field: int32 magicPenPercent = 17;
   */
  magicPenPercent: number;

  /**
   * @generated from field: int32 magicResist = 18;
   */
  magicResist: number;

  /**
   * @generated from field: int32 movementSpeed = 19;
   */
  movementSpeed: number;

  /**
   * @generated from field: int32 omnivamp = 20;
   */
  omnivamp: number;

  /**
   * @generated from field: int32 physicalVamp = 21;
   */
  physicalVamp: number;

  /**
   * @generated from field: int32 power = 22;
   */
  power: number;

  /**
   * @generated from field: int32 powerMax = 23;
   */
  powerMax: number;

  /**
   * @generated from field: int32 powerRegen = 24;
   */
  powerRegen: number;

  /**
   * @generated from field: int32 spellVamp = 25;
   */
  spellVamp: number;

  constructor(data?: PartialMessage<ParticipantChampionStats>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.ParticipantChampionStats";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantChampionStats;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantChampionStats;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantChampionStats;

  static equals(a: ParticipantChampionStats | PlainMessage<ParticipantChampionStats> | undefined, b: ParticipantChampionStats | PlainMessage<ParticipantChampionStats> | undefined): boolean;
}

/**
 * @generated from message matches.DamageStats
 */
export declare class DamageStats extends Message<DamageStats> {
  /**
   * @generated from field: int32 magicDamageDone = 1;
   */
  magicDamageDone: number;

  /**
   * @generated from field: int32 magicDamageDoneToChampions = 2;
   */
  magicDamageDoneToChampions: number;

  /**
   * @generated from field: int32 magicDamageTaken = 3;
   */
  magicDamageTaken: number;

  /**
   * @generated from field: int32 physicalDamageDone = 4;
   */
  physicalDamageDone: number;

  /**
   * @generated from field: int32 physicalDamageDoneToChampions = 5;
   */
  physicalDamageDoneToChampions: number;

  /**
   * @generated from field: int32 physicalDamageTaken = 6;
   */
  physicalDamageTaken: number;

  /**
   * @generated from field: int32 totalDamageDone = 7;
   */
  totalDamageDone: number;

  /**
   * @generated from field: int32 totalDamageDoneToChampions = 8;
   */
  totalDamageDoneToChampions: number;

  /**
   * @generated from field: int32 totalDamageTaken = 9;
   */
  totalDamageTaken: number;

  /**
   * @generated from field: int32 trueDamageDone = 10;
   */
  trueDamageDone: number;

  /**
   * @generated from field: int32 trueDamageDoneToChampions = 11;
   */
  trueDamageDoneToChampions: number;

  /**
   * @generated from field: int32 trueDamageTaken = 12;
   */
  trueDamageTaken: number;

  constructor(data?: PartialMessage<DamageStats>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.DamageStats";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DamageStats;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DamageStats;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DamageStats;

  static equals(a: DamageStats | PlainMessage<DamageStats> | undefined, b: DamageStats | PlainMessage<DamageStats> | undefined): boolean;
}

/**
 * @generated from message matches.ParticipantFrame
 */
export declare class ParticipantFrame extends Message<ParticipantFrame> {
  /**
   * @generated from field: matches.ParticipantChampionStats championStats = 2;
   */
  championStats?: ParticipantChampionStats;

  /**
   * @generated from field: int32 currentGold = 3;
   */
  currentGold: number;

  /**
   * @generated from field: matches.DamageStats damageStats = 4;
   */
  damageStats?: DamageStats;

  /**
   * @generated from field: int32 goldPerSecond = 5;
   */
  goldPerSecond: number;

  /**
   * @generated from field: int32 jungleMinionsKilled = 6;
   */
  jungleMinionsKilled: number;

  /**
   * @generated from field: int32 level = 7;
   */
  level: number;

  /**
   * @generated from field: int32 minionsKilled = 8;
   */
  minionsKilled: number;

  /**
   * @generated from field: int32 participantId = 9;
   */
  participantId: number;

  /**
   * @generated from field: matches.Position position = 10;
   */
  position?: Position;

  /**
   * @generated from field: int32 timeEnemySpentControlled = 11;
   */
  timeEnemySpentControlled: number;

  /**
   * @generated from field: int32 totalGold = 12;
   */
  totalGold: number;

  /**
   * @generated from field: int32 xp = 13;
   */
  xp: number;

  constructor(data?: PartialMessage<ParticipantFrame>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.ParticipantFrame";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantFrame;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantFrame;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantFrame;

  static equals(a: ParticipantFrame | PlainMessage<ParticipantFrame> | undefined, b: ParticipantFrame | PlainMessage<ParticipantFrame> | undefined): boolean;
}

/**
 * @generated from message matches.Event
 */
export declare class Event extends Message<Event> {
  /**
   * @generated from field: int32 realTimestamp = 1;
   */
  realTimestamp: number;

  /**
   * @generated from field: int32 timestamp = 2;
   */
  timestamp: number;

  /**
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * @generated from field: string levelUpType = 4;
   */
  levelUpType: string;

  /**
   * @generated from field: int32 participantId = 5;
   */
  participantId: number;

  /**
   * @generated from field: int32 skillSlot = 6;
   */
  skillSlot: number;

  /**
   * @generated from field: int32 itemId = 7;
   */
  itemId: number;

  /**
   * @generated from field: int32 creatorId = 8;
   */
  creatorId: number;

  /**
   * @generated from field: string wardType = 9;
   */
  wardType: string;

  /**
   * @generated from field: int32 level = 10;
   */
  level: number;

  /**
   * @generated from field: int32 bounty = 11;
   */
  bounty: number;

  /**
   * @generated from field: int32 killStreakLength = 12;
   */
  killStreakLength: number;

  /**
   * @generated from field: int32 killerId = 13;
   */
  killerId: number;

  /**
   * @generated from field: matches.Position position = 14;
   */
  position?: Position;

  /**
   * @generated from field: int32 shutdownBounty = 15;
   */
  shutdownBounty: number;

  /**
   * @generated from field: repeated matches.VictimDamage victimDamageDealt = 16;
   */
  victimDamageDealt: VictimDamage[];

  /**
   * @generated from field: repeated matches.VictimDamage victimDamageReceived = 17;
   */
  victimDamageReceived: VictimDamage[];

  /**
   * @generated from field: int32 victimId = 18;
   */
  victimId: number;

  /**
   * @generated from field: string killType = 19;
   */
  killType: string;

  /**
   * @generated from field: repeated int32 assistingParticipantIds = 20;
   */
  assistingParticipantIds: number[];

  /**
   * @generated from field: int32 afterId = 21;
   */
  afterId: number;

  /**
   * @generated from field: int32 beforeId = 22;
   */
  beforeId: number;

  /**
   * @generated from field: int32 goldGain = 23;
   */
  goldGain: number;

  /**
   * @generated from field: int32 killerTeamId = 24;
   */
  killerTeamId: number;

  /**
   * @generated from field: string monsterType = 25;
   */
  monsterType: string;

  /**
   * @generated from field: string monsterSubType = 26;
   */
  monsterSubType: string;

  /**
   * @generated from field: string laneType = 27;
   */
  laneType: string;

  /**
   * @generated from field: int32 teamId = 28;
   */
  teamId: number;

  /**
   * @generated from field: string buildingType = 29;
   */
  buildingType: string;

  /**
   * @generated from field: string towerType = 30;
   */
  towerType: string;

  /**
   * @generated from field: int32 multiKillLength = 31;
   */
  multiKillLength: number;

  /**
   * @generated from field: int32 actualStartTime = 32;
   */
  actualStartTime: number;

  /**
   * @generated from field: int32 gameId = 33;
   */
  gameId: number;

  /**
   * @generated from field: int32 winningTeam = 34;
   */
  winningTeam: number;

  constructor(data?: PartialMessage<Event>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Event";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event;

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean;
}

/**
 * @generated from message matches.Position
 */
export declare class Position extends Message<Position> {
  /**
   * @generated from field: int32 x = 1;
   */
  x: number;

  /**
   * @generated from field: int32 y = 2;
   */
  y: number;

  constructor(data?: PartialMessage<Position>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.Position";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Position;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Position;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Position;

  static equals(a: Position | PlainMessage<Position> | undefined, b: Position | PlainMessage<Position> | undefined): boolean;
}

/**
 * @generated from message matches.VictimDamage
 */
export declare class VictimDamage extends Message<VictimDamage> {
  /**
   * @generated from field: bool basic = 1;
   */
  basic: boolean;

  /**
   * @generated from field: int32 magicDamage = 2;
   */
  magicDamage: number;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: int32 participantId = 4;
   */
  participantId: number;

  /**
   * @generated from field: int32 physicalDamage = 5;
   */
  physicalDamage: number;

  /**
   * @generated from field: string spellName = 6;
   */
  spellName: string;

  /**
   * @generated from field: int32 spellSlot = 7;
   */
  spellSlot: number;

  /**
   * @generated from field: int32 trueDamage = 8;
   */
  trueDamage: number;

  /**
   * @generated from field: string type = 9;
   */
  type: string;

  constructor(data?: PartialMessage<VictimDamage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "matches.VictimDamage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VictimDamage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VictimDamage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VictimDamage;

  static equals(a: VictimDamage | PlainMessage<VictimDamage> | undefined, b: VictimDamage | PlainMessage<VictimDamage> | undefined): boolean;
}

